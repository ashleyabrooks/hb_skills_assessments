RUNTIME

1. When calculating the Big O notation for a particular algorithm, it’s necessary to consider the length of time it takes for the algorithm to run as the algorithm’s workload approaches infinity. You can think of the workload as the number of tasks required to complete a job. What determines the workload of figuring out whether your box of animal crackers contains an elephant?

    The workload of figuring out whether a box of animal crackers contains an elephant is determined by the number of crackers in the box. The runtime is O(n) where n is the number of crackers. As the number of crackers in the box increases, the runtime increases linearly. 


2. Order the following runtimes in descending order of efficiency (that is, fastest runtimes first, slowest last) as n approaches infinity:
    O(1)
    O(log n)
    O(n)
    O(n log n)
    O(n2)
    O(2n)



STACKS AND QUEUES

1. In the following cases, would a stack or queue be a more appropriate data structure?
        1. The process of loading and unloading pallets onto a flatbed truck 
            - Stack
        2. Putting bottle caps on bottles of beer as they roll down an assembly line 
            - Queue
        3. Calculating the solution to this mathematical expression: 2 + (7 * 4) - (3 / 2) 
            - If the items on the right were the 'first in', my answer would be a Queue because I would recommend calculating this specific problem with first in, first out. 

2. Describe two more situations where a queue would be an appropriate data structure.
    - Serving customers at a coffee shop
    - Taking orders at a sandwich shop

3. Describe two more situations where a stack would be an appropriate data structure.
    - Washing dishes
    - Putting stamps on a stack of envelopes



LINKED LISTS

1. Given the linked list below, which are the nodes? What is the data for each node? Where is the head? Where is the tail? (Please be as specific as possible — exactly which parts of the diagram correspond to each part? Arrows? Boxes? Text?)

    - Nodes: The boxes that contain the words "Apple", "Berry", "Cherry"
    - Data for each node: The words in the node boxes. "Apple", "Berry", "Cherry"
    - Head: The "Apple" node
    - Tail: The node that contains "None"

2. What’s the difference between doubly- and singly-linked lists?

    Singly-linked lists only store a node's "next" (that is, the node that comes next in the linked list), while doubly-linked lists store a node's "next" AND "prev" (the previous node).

3. Why is it faster to append to a linked list if we keep track of the tail as an attribute?

    It's faster to append to a linked list if we keep track of the tail as an attribute because then we already know where the end of the list is. Without tracking the tail, we would have to traverse through the list every time to find the tail before appending a new item.


TREES

1. Given the tree above, in what order would a Breadth First Search (BFS) algorithm visit each node until finding burritos (starting at food)? Just list the order of nodes visited; no need to recreate the state of the algorithm data in your answer.

    food, Italian, Indian, Mexican, lasagna, pizza, tikka masala, saag, burritos

2. Given the tree above, in what order would a Depth First Search (DFS) algorithm visit each node until finding Chicago-style (starting at food)? Just list the order of nodes visited; no need to recreate the state of the algorithm data in your answer.

    food, Mexican, enchiladas, tacos, burritos

3. How is a binary search tree different from other trees?

    A binary search tree is different from other trees because it is balanced. A balanced tree means each node has a left and right child. If the node is a leaf (without any children), then it cannot be more than one "level" down from the other leaves. 
















